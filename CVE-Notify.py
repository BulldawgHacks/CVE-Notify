import requests
from datetime import datetime, timedelta
import json
import os
import argparse

def build_url():

    current_date = datetime.now().date()

    yesterday_date = current_date - timedelta(days=1)

    yesterday_midnight = datetime.combine(yesterday_date, datetime.min.time()) + timedelta(days=1, seconds=-1)

    # Format the dates in the desired format
    date_format = "%Y-%m-%d"
    yesterday_date_str = yesterday_date.strftime(date_format)
    yesterday_midnight_str = yesterday_midnight.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3]

    # Adding the time portion (zeros)
    yesterday_date_str += "T00:00:00.000"

    NVD_CVE_URL = f"https://services.nvd.nist.gov/rest/json/cves/2.0?pubStartDate={yesterday_date_str}&pubEndDate={yesterday_midnight_str}"

    return NVD_CVE_URL

def query_api(NVD_CVE_URL):
    response = requests.get(NVD_CVE_URL)

    if response.status_code == 200:
        try:
            json_data = response.json()
            json_data = json.dumps(json_data)

        except ValueError:
            print("Response content is not valid JSON.")
    else:
        print(f"Request failed with status code: {response.status_code}")

    # Parse JSON
    parsed_data = json.loads(str(json_data))

    return parsed_data


# Extract and print CVE IDs
def generate_report(parsed_data, filters):
    vulnerabilities = parsed_data.get("vulnerabilities", [])
    
    for vulnerability in vulnerabilities:
        cve_data = vulnerability.get("cve", {})
        cve_id = cve_data.get("id")
        description = str(cve_data.get("descriptions", [{}])[0].get("value", "No description available")).strip("\n")
        metrics = cve_data.get("metrics", {})
        cvss_metric_v31 = metrics.get("cvssMetricV31", [])
        
        if cvss_metric_v31:
            base_score = cvss_metric_v31[0]["cvssData"].get("baseScore", "N/A")
        else:
            base_score = "N/A"
        
        if cve_id:
            line_break = "-" * 20

            if filters != "":
                for filter in filters:
                    if filter in description:
                        CVE_Report = ("\n" + line_break + "\n" + cve_id + ": " + description + "\n" +"Base Score: " + str(base_score) + "\n" + line_break + "\n")

            else:
                CVE_Report = ("\n" + line_break + "\n" + cve_id + ": " + description + "\n" +"Base Score: " + str(base_score) + "\n" + line_break + "\n")

        with open("/tmp/CVE_Report.txt", "a") as file:
            file.write(CVE_Report)

def send_notifications():
    os.system("cat /tmp/CVE_Report.txt | notify -id NVD -silent -bulk")
    os.system("rm /tmp/CVE_Report.txt")

def build_filter(filter_file_name):
    with open(filter_file_name, "r") as file:
        filter_list = file.read().split("\n")

    return filter_list

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filter',help="File containing keywords to filter by, each on a separate line", required=False)
    args = parser.parse_args()
    
    filter_file_name = args.filter

    if filter_file_name != None:
        filters = build_filter(filter_file_name)
    else:
        filters = ""

    
    url = build_url()
    results = query_api(url)
    generate_report(results, filters)
    send_notifications()

main()